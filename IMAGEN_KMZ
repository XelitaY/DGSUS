import os
import zipfile
import shutil
from qgis.core import (
    QgsProject, QgsVectorLayer, QgsCoordinateTransform, QgsCoordinateReferenceSystem
)
from qgis.PyQt.QtWidgets import (
    QInputDialog, QFileDialog, QDialog, QVBoxLayout, QCheckBox, QPushButton, QLabel, QComboBox
)
from qgis.utils import iface

# --- Clase para seleccionar campos ---
class KMZFieldSelector(QDialog):
    def __init__(self, campos):
        super().__init__()
        self.setWindowTitle("Configurar campos para KMZ")
        self.campos = campos
        self.checkboxes = []
        self.selected_description_fields = []
        self.selected_title_field = None

        layout = QVBoxLayout()

        # Combo para título
        layout.addWidget(QLabel("Selecciona el campo para el título del marcador:"))
        self.title_combo = QComboBox()
        self.title_combo.addItems(campos)
        layout.addWidget(self.title_combo)

        # Checkboxes para descripción
        layout.addWidget(QLabel("Selecciona campos para la descripción:"))
        for campo in campos:
            cb = QCheckBox(campo)
            layout.addWidget(cb)
            self.checkboxes.append(cb)

        # Botón aceptar
        btn = QPushButton("Aceptar")
        btn.clicked.connect(self.accept)
        layout.addWidget(btn)

        self.setLayout(layout)

    def get_selections(self):
        self.selected_description_fields = [cb.text() for cb in self.checkboxes if cb.isChecked()]
        self.selected_title_field = self.title_combo.currentText()
        return self.selected_title_field, self.selected_description_fields

# --- Pedir datos ---
colonia, ok1 = QInputDialog.getText(None, 'Colonia', 'Escribe el nombre de la colonia:')
cuadrilla, ok2 = QInputDialog.getText(None, 'Cuadrilla', 'Escribe el número de cuadrilla:')
fecha, ok3 = QInputDialog.getText(None, 'Fecha', 'Escribe la fecha (ejemplo: 2024-06-12):')
if not (ok1 and ok2 and ok3):
    raise Exception("Operación cancelada")

carpeta_salida = QFileDialog.getExistingDirectory(None, 'Selecciona la carpeta de salida')
if not carpeta_salida:
    raise Exception("No se seleccionó carpeta")

# --- Obtener capa activa ---
layer = iface.activeLayer()
if not layer:
    raise Exception("No hay capa activa")

# --- Obtener lista de campos para el diálogo ---
campos = [field.name() for field in layer.fields()]

# --- Mostrar diálogo para seleccionar campos ---
dialog = KMZFieldSelector(campos)
if dialog.exec_() != QDialog.Accepted:
    raise Exception("Operación cancelada por el usuario")

campo_titulo, campos_descripcion = dialog.get_selections()

# --- Preparar carpeta temporal para kmz ---
nombre_kmz = f"{colonia.upper()}_{cuadrilla.upper()}_{fecha.replace('-', '')}"
ruta_kmz = os.path.join(carpeta_salida, f"{nombre_kmz}.kmz")
carpeta_temporal = os.path.join(carpeta_salida, f"{nombre_kmz}_kmz")
carpeta_imagenes = os.path.join(carpeta_temporal, "imagenes")

os.makedirs(carpeta_imagenes, exist_ok=True)

# --- Transformación a WGS84 ---
crs_src = layer.crs()
crs_dest = QgsCoordinateReferenceSystem("EPSG:4326")
transformer = QgsCoordinateTransform(crs_src, crs_dest, QgsProject.instance())

# --- Crear archivo KML ---
ruta_kml = os.path.join(carpeta_temporal, "doc.kml")

with open(ruta_kml, "w", encoding="utf-8") as kml:
    kml.write("<?xml version='1.0' encoding='UTF-8'?>\n")
    kml.write("<kml xmlns='http://www.opengis.net/kml/2.2'>\n")
    kml.write("<Document>\n")
    kml.write(f"<name>{nombre_kmz}</name>\n")

    for feat in layer.getFeatures():
        geom = feat.geometry()
        if geom is None or geom.isEmpty():
            continue
        try:
            point_geom = geom.asPoint()
        except:
            point_geom = geom.centroid().asPoint()

        if point_geom is None:
            continue

        # Transformar a WGS84
        try:
            wgs84_point = transformer.transform(point_geom)
        except Exception as e:
            print(f"Error transformando geometría: {e}")
            continue

        fotos = []
        for campo_foto in ['FOTO1', 'FOTO2', 'FOTO3']:
            ruta_foto = feat[campo_foto]
            if ruta_foto and os.path.exists(ruta_foto):
                nombre_archivo = os.path.basename(ruta_foto)
                destino = os.path.join(carpeta_imagenes, nombre_archivo)
                if not os.path.exists(destino):
                    shutil.copy(ruta_foto, destino)
                fotos.append(f"imagenes/{nombre_archivo}")

        if not fotos:
            continue

        # Título del marcador: valor del campo elegido
        valor_titulo = feat[campo_titulo] if campo_titulo in feat.fields().names() else str(feat.id())

        # Crear placemark
        kml.write("<Placemark>\n")
        kml.write(f"<name>{valor_titulo}</name>\n")

        # Descripción con campos seleccionados + imágenes
        kml.write("<description><![CDATA[")
        for campo_desc in campos_descripcion:
            if campo_desc in feat.fields().names():
                valor = feat[campo_desc]
                kml.write(f"<b>{campo_desc}:</b> {valor}<br>")
        for f in fotos:
            kml.write(f'<img src="{f}" width="300"><br>')
        kml.write("]]></description>\n")

        kml.write(f"<Point><coordinates>{wgs84_point.x()},{wgs84_point.y()},0</coordinates></Point>\n")
        kml.write("</Placemark>\n")

    kml.write("</Document>\n")
    kml.write("</kml>\n")

# --- Comprimir en KMZ ---
with zipfile.ZipFile(ruta_kmz, 'w', zipfile.ZIP_DEFLATED) as kmz:
    kmz.write(ruta_kml, arcname='doc.kml')
    for root, _, files in os.walk(carpeta_imagenes):
        for file in files:
            ruta_completa = os.path.join(root, file)
            arcname = os.path.relpath(ruta_completa, carpeta_temporal)
            kmz.write(ruta_completa, arcname=arcname)

# --- Borrar carpeta temporal ---
shutil.rmtree(carpeta_temporal
